// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecipeApi.Data;

#nullable disable

namespace RecipeApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506014035_AddAccountAndPermissionWithInitialSeeder")]
    partial class AddAccountAndPermissionWithInitialSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RecipeApi.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("687efa72-305a-4fd6-a5df-2fc838ffa837"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Email = "super@admin.com",
                            FullName = "Super Admin",
                            Password = "$2a$12$A2HSfL89FCvuX6uHixiVBuGrl2eKDvPwjDFxbX2yr12.0JDVVZoqi",
                            RoleId = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8"),
                            Username = "superadmin"
                        });
                });

            modelBuilder.Entity("RecipeApi.Entities.DataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomRegex")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("RecipeApi.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56b71bb1-3b72-4086-ac48-e326ddd55ce0"),
                            ControllerName = "recipe",
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Name = "Recipe Management",
                            Order = 1
                        });
                });

            modelBuilder.Entity("RecipeApi.Entities.PermissionMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12bf6fa5-4aa0-4721-866a-f595c2d889ef"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Method = "view",
                            PermissionId = new Guid("56b71bb1-3b72-4086-ac48-e326ddd55ce0")
                        },
                        new
                        {
                            Id = new Guid("fd1c7b7a-7cce-4d65-a27e-5c3b701a3484"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Method = "create",
                            PermissionId = new Guid("56b71bb1-3b72-4086-ac48-e326ddd55ce0")
                        },
                        new
                        {
                            Id = new Guid("3dbbfcf0-9b23-47cd-a4dc-c4cc0987291f"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Method = "update",
                            PermissionId = new Guid("56b71bb1-3b72-4086-ac48-e326ddd55ce0")
                        },
                        new
                        {
                            Id = new Guid("7768fcd1-cebe-4a0f-8e62-2b8f5ce32e1e"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Method = "delete",
                            PermissionId = new Guid("56b71bb1-3b72-4086-ac48-e326ddd55ce0")
                        });
                });

            modelBuilder.Entity("RecipeApi.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("RecipeApi.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Description = "Super admin access",
                            RoleName = "Super Admin"
                        },
                        new
                        {
                            Id = new Guid("21b67a56-7c4a-4b13-b14a-1eb9c643d09c"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Description = "Admin access",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b4bd8623-5fb5-42d7-8b6f-6ff58813a3b0"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            Description = "Regular user",
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("RecipeApi.Entities.RolePermissionMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PermissionMethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionMethodId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe193127-feba-4007-b760-912245e4018c"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            PermissionMethodId = new Guid("12bf6fa5-4aa0-4721-866a-f595c2d889ef"),
                            RoleId = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8")
                        },
                        new
                        {
                            Id = new Guid("beb90ff7-da87-4879-aed6-31d9a5e448d4"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            PermissionMethodId = new Guid("fd1c7b7a-7cce-4d65-a27e-5c3b701a3484"),
                            RoleId = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8")
                        },
                        new
                        {
                            Id = new Guid("ca1fd896-d93a-4ea3-aeef-c367ef3d1864"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            PermissionMethodId = new Guid("3dbbfcf0-9b23-47cd-a4dc-c4cc0987291f"),
                            RoleId = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8")
                        },
                        new
                        {
                            Id = new Guid("adb0d599-4f9c-4c55-8d92-526590157bb4"),
                            Created = new DateTime(2025, 5, 5, 18, 13, 46, 418, DateTimeKind.Utc).AddTicks(6150),
                            PermissionMethodId = new Guid("7768fcd1-cebe-4a0f-8e62-2b8f5ce32e1e"),
                            RoleId = new Guid("e287d2e0-9ca7-4a6e-aafe-08982ff2c5f8")
                        });
                });

            modelBuilder.Entity("RecipeApi.Entities.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("RecipeApi.Entities.StepParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StepParameterTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("StepParameterTemplateId");

                    b.ToTable("StepParameters");
                });

            modelBuilder.Entity("RecipeApi.Entities.StepParameterTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DataTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.ToTable("StepParameterTemplates");
                });

            modelBuilder.Entity("RecipeApi.Entities.Account", b =>
                {
                    b.HasOne("RecipeApi.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RecipeApi.Entities.PermissionMethod", b =>
                {
                    b.HasOne("RecipeApi.Entities.Permission", "Permission")
                        .WithMany("PermissionMethods")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("RecipeApi.Entities.RolePermissionMethod", b =>
                {
                    b.HasOne("RecipeApi.Entities.PermissionMethod", "PermissionMethod")
                        .WithMany()
                        .HasForeignKey("PermissionMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeApi.Entities.Role", "Role")
                        .WithMany("RolePermissionMethods")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionMethod");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RecipeApi.Entities.Step", b =>
                {
                    b.HasOne("RecipeApi.Entities.Step", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RecipeApi.Entities.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeApi.Entities.StepParameter", b =>
                {
                    b.HasOne("RecipeApi.Entities.Step", "Step")
                        .WithMany("StepParameters")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeApi.Entities.StepParameterTemplate", "StepParameterTemplate")
                        .WithMany()
                        .HasForeignKey("StepParameterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("StepParameterTemplate");
                });

            modelBuilder.Entity("RecipeApi.Entities.StepParameterTemplate", b =>
                {
                    b.HasOne("RecipeApi.Entities.DataType", "DataType")
                        .WithMany()
                        .HasForeignKey("DataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("RecipeApi.Entities.Permission", b =>
                {
                    b.Navigation("PermissionMethods");
                });

            modelBuilder.Entity("RecipeApi.Entities.Recipe", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("RecipeApi.Entities.Role", b =>
                {
                    b.Navigation("RolePermissionMethods");
                });

            modelBuilder.Entity("RecipeApi.Entities.Step", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("StepParameters");
                });
#pragma warning restore 612, 618
        }
    }
}
